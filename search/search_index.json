{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>An Architectural Decision (AD) is a justified design choice that addresses a functional or non-functional requirement that is architecturally significant. An Architecturally Significant Requirement (ASR) is a requirement that has a measurable effect on a system\u2019s architecture and quality.</p> <p>The purpose of this application is to capture an Architectural Decision and its rationale; display the collection of ADRs created and maintained as a decision log.</p> <p></p>"},{"location":"#documentation","title":"Documentation","text":"<p>The documentation contains a</p> <ul> <li>User Guide Overview,  Using the App, and Getting Started.</li> <li>Administrator Guide - How to Install, Configure, Upgrade, or Uninstall the App.</li> <li>Developer Guide - Extending the App, Code Reference, Contribution Guide.</li> </ul>"},{"location":"#contributing-to-the-documentation","title":"Contributing to the Documentation","text":"<p>You can find all the Markdown source for the App documentation under the <code>docs</code> folder in this repository. For simple edits, a Markdown capable editor is sufficient: clone the repository and edit away.</p> <p>If you need to view the fully-generated documentation site, you can build it with MkDocs. A container hosting the documentation can be started using the <code>invoke</code> commands (details in the Development Environment Guide) on http://localhost:8001. Using this container, as your changes to the documentation are saved, they will be automatically rebuilt and any pages currently being viewed will be reloaded in your browser.</p> <p>Any PRs with fixes or improvements are very welcome!</p>"},{"location":"admin/http/","title":"Configuring an HTTP Server","text":"<p>This documentation provides example configurations for NGINX though any HTTP server which supports WSGI should be compatible.</p>"},{"location":"admin/http/#obtain-an-ssl-certificate","title":"Obtain an SSL Certificate","text":"<p>To enable HTTPS access to the ADR App, you'll need a valid SSL certificate. You can purchase one from a trusted commercial provider, obtain one for free from Let's Encrypt, or generate your own (although self-signed certificates are generally untrusted). Both the public certificate and private key files need to be installed on your ADR App server in a secure location that is readable only by the <code>root</code> user.</p> <p>Warning</p> <p>The command below can be used to generate a self-signed certificate for testing purposes, however it is strongly recommended to use a certificate from a trusted authority in production.</p> <p>Two files will be created: the public certificate (<code>adr.crt</code>) and the private key (<code>adr.key</code>). The certificate is published to the world, whereas the private key must be kept secret at all times.</p> <p>Info</p> <p>Some Linux installations, including CentOS, have changed the location for SSL certificates from <code>/etc/ssl/</code> to <code>/etc/pki/tls/</code>. The command below may need to be changed to reflect the certificate location.</p> <p>The following command will prompt you for additional details of the certificate; all of which are optional.</p> <pre><code>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n  -keyout /etc/ssl/private/adr.key \\\n  -out /etc/ssl/certs/adr.crt\n</code></pre>"},{"location":"admin/http/#http-server-installation","title":"HTTP Server Installation","text":"<p>Any HTTP server of your choosing is supported. For your convenience, setup instructions for NGINX are provided here.</p> <p>Warning</p> <p>The following steps must be performed with root permissions.</p>"},{"location":"admin/http/#nginx","title":"NGINX","text":"<p>NGINX is a free, open source, high-performance HTTP server and reverse proxy and is by far the most popular choice.</p>"},{"location":"admin/http/#install-nginx","title":"Install NGINX","text":"<p>Begin by installing NGINX:</p> <p>On Ubuntu:</p> <pre><code>sudo apt install -y nginx\n</code></pre> <p>On CentOS/RHEL:</p> <pre><code>sudo dnf install -y nginx\n</code></pre>"},{"location":"admin/http/#configure-nginx","title":"Configure NGINX","text":"<p>Once NGINX is installed, copy and paste the following NGINX configuration into <code>/etc/nginx/sites-available/adr.conf</code> for Ubuntu or <code>/etc/nginx/conf.d/adr.conf</code> for CentOS/RHEL:</p> <p>Note</p> <p>If the file location of SSL certificates had to be changed in the Obtain an SSL Certificate step above, then the location will need to be changed in the NGINX configuration below.</p> <pre><code>server {\n    listen 443 ssl http2 default_server;\n    listen [::]:443 ssl http2 default_server;\n\n    server_name _;\n\n    ssl_certificate /etc/ssl/certs/adr.crt;\n    ssl_certificate_key /etc/ssl/private/adr.key;\n\n    client_max_body_size 25m;\n\n    location /static/ {\n        alias /opt/adr/static/;\n    }\n\n    # For subdirectory hosting, you'll want to toggle this (e.g. `/adr/`).\n    # Don't forget to set `FORCE_SCRIPT_NAME` in your `adr_config.py` to match.\n    # location /adr/ {\n    location / {\n        include uwsgi_params;\n        uwsgi_pass  127.0.0.1:8001;\n        uwsgi_param Host $host;\n        uwsgi_param X-Real-IP $remote_addr;\n        uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;\n        uwsgi_param X-Forwarded-Proto $http_x_forwarded_proto;\n\n        # If you want subdirectory hosting, uncomment this. The path must match\n        # the path of this location block (e.g. `/adr`). For NGINX the path\n        # MUST NOT end with a trailing \"/\".\n        # uwsgi_param SCRIPT_NAME /adr;\n    }\n}\n\nserver {\n    # Redirect HTTP traffic to HTTPS\n    listen 80 default_server;\n    listen [::]:80 default_server;\n    server_name _;\n    return 301 https://$host$request_uri;\n}\n</code></pre>"},{"location":"admin/http/#enable-the-adr-app","title":"Enable the ADR App","text":"<p>On Ubuntu:</p> <p>To enable the ADR App site, you'll need to delete <code>/etc/nginx/sites-enabled/default</code> and create a symbolic link in the <code>sites-enabled</code> directory to the configuration file you just created:</p> <pre><code>sudo rm -f /etc/nginx/sites-enabled/default\nsudo ln -s /etc/nginx/sites-available/adr.conf /etc/nginx/sites-enabled/adr.conf\n</code></pre> <p>On CentOS:</p> <p>Run the following command to disable the default site that comes with the <code>nginx</code> package:</p> <pre><code>sudo sed -i 's@ default_server@@' /etc/nginx/nginx.conf\n</code></pre>"},{"location":"admin/http/#restart-nginx","title":"Restart NGINX","text":"<p>Finally, restart the <code>nginx</code> service to use the new configuration.</p> <pre><code>sudo systemctl restart nginx\n</code></pre> <p>Info</p> <p>If the restart fails, and you changed the default key location, check to make sure the <code>adr.conf</code> file you pasted has the updated key location. For example, CentOS requires keys to be in <code>/etc/pki/tls/</code> instead of <code>/etc/ssl/</code>.</p>"},{"location":"admin/http/#confirm-permissions-for-adr_root","title":"Confirm Permissions for ADR_ROOT","text":"<p>Ensure that the <code>ADR_ROOT</code> permissions are set to <code>755</code>. If permissions need to be changed, as the <code>adr</code> user run:</p> <pre><code>chmod 755 $ADR_ROOT\n</code></pre>"},{"location":"admin/http/#confirm-connectivity","title":"Confirm Connectivity","text":"<p>At this point, you should be able to connect to the HTTPS service at the server name or IP address you provided. If you used a self-signed certificate, you will likely need to explicitly allow connectivity in your browser.</p> <p>Info</p> <p>Please keep in mind that the configurations provided here are bare minimums required to get the ADR App up and running. You may want to make adjustments to better suit your production environment.</p> <p>Warning</p> <p>Certain components of the ADR App (such as the display of rack elevation diagrams) rely on the use of embedded objects. Ensure that your HTTP server configuration does not override the <code>X-Frame-Options</code> response header set by the ADR App.</p>"},{"location":"admin/http/#troubleshooting","title":"Troubleshooting","text":""},{"location":"admin/http/#unable-to-connect","title":"Unable to Connect","text":"<p>If you are unable to connect to the HTTP server, check that:</p> <ul> <li>NGINX is running and configured to listen on the correct port.</li> <li>Access is not being blocked by a firewall somewhere along the path. (Try connecting locally from the server itself.)</li> </ul>"},{"location":"admin/http/#static-media-failure","title":"Static Media Failure","text":"<p>If you get a Static Media Failure; The following static media file failed to load: css/base.css, verify the permissions on the <code>$ADR_ROOT</code> directory are <code>755</code>.</p> <p>Example of correct permissions (at the <code>[root@localhost ~]#</code> prompt)</p> <pre><code>ls -l /opt/\n</code></pre> <p>Example output:</p> <pre><code>total 4\ndrwxr-xr-x. 11 adr adr 4096 Apr  5 11:24 adr\n</code></pre> <p>If the permissions are not correct, modify them accordingly.</p> <p>Example of modifying the permissions:</p> <pre><code>ls -l /opt/\n</code></pre> <p>Example output:</p> <pre><code>total 4\ndrwx------. 11 adr adr 4096 Apr  5 10:00 adr\n</code></pre> <p>At the prompt <code>[adr@localhost ~]$</code> execute:</p> <pre><code>chmod 755 $ADR_ROOT\n</code></pre> <p>Then to verify that the user has the permissions to the directory execute at the <code>[adr@localhost ~]$</code> prompt:</p> <pre><code>ls -l /opt/\n</code></pre> <p>Example output shows that the user and group are both <code>adr</code> below:</p> <pre><code>total 4\ndrwxr-xr-x. 11 adr adr 4096 Apr  5 11:24 adr\n</code></pre>"},{"location":"admin/http/#502-bad-gateway","title":"502 Bad Gateway","text":"<p>If you are able to connect but receive a 502 (bad gateway) error, check the following:</p> <ul> <li>The uWSGI worker processes are running (<code>systemctl status adr</code> should show a status of <code>active (running)</code>)</li> <li>NGINX is configured to connect to the port on which uWSGI is listening (default is <code>8001</code>).</li> <li>SELinux may be preventing the reverse proxy connection. You may need to allow HTTP network connections with the   command <code>setsebool -P httpd_can_network_connect 1</code>. For further information, view the SELinux   troubleshooting guide.</li> </ul>"},{"location":"admin/install/","title":"Installing the App","text":""},{"location":"admin/install/#prerequisites","title":"Prerequisites","text":"<p>This section describes the system dependencies required for The App. They can be all installed on a single system, or distributed across your environment. That will be up to you. Our install instructions assume a single system install, and that is good for most use cases. More advanced configurations are also possible, but are not covered here.</p> <p>Here you will find detailed instructions on how to install and configure the App on Ubuntu 20.04/22.04 LTS.</p>"},{"location":"admin/install/#install-system-packages","title":"Install System Packages","text":"<p>Install the prerequisite system libraries and utilities.</p> <p>This will install:</p> <ul> <li>Git</li> <li>Python 3</li> <li>Pip</li> <li>Redis server and client</li> <li>PostgreSQL server and client</li> </ul> <pre><code>sudo apt update -y\nsudo apt install -y git python3 python3-pip python3-venv python3-dev postgresql\n</code></pre>"},{"location":"admin/install/#ldap-authentication","title":"LDAP authentication","text":"<p>Install the prerequisite system libraries for LDAP authentication.</p> <pre><code>sudo apt update -y\nsudo apt install -y libsasl2-dev libldap2-dev libssl-dev\n</code></pre>"},{"location":"admin/install/#database-setup","title":"Database Setup","text":"<p>In this step you'll create a database and database user for use by the App, and verify your connection to the database.</p>"},{"location":"admin/install/#create-a-postgresql-database","title":"Create a PostgreSQL Database","text":"<p>At a minimum, we need to create a database for the App and assign it a username and password for authentication. This is done with the following commands.</p> <p>Danger</p> <p>Do not use the password from the example. Choose a strong, random password to ensure secure database authentication for your the App installation.</p> <pre><code>sudo -u postgres psql\n</code></pre> <p>Example output:</p> <pre><code>psql (14.7 (Ubuntu 14.7-0ubuntu0.22.04.1))\nType \"help\" for help.\n\npostgres=# CREATE DATABASE adr;\nCREATE DATABASE\npostgres=# CREATE USER adr_db_usr WITH PASSWORD 'insecure_password';\nCREATE ROLE\npostgres=# GRANT ALL PRIVILEGES ON DATABASE adr TO adr_db_usr;\nGRANT\npostgres=# \\q\n</code></pre>"},{"location":"admin/install/#verify-postgresql-service-status","title":"Verify PostgreSQL Service Status","text":"<p>You can verify that authentication works issuing the following command and providing the configured password. (Replace <code>localhost</code> with your database server if using a remote database.)</p> <p>If successful, you will enter a <code>adr</code> prompt. Type <code>\\conninfo</code> to confirm your connection, or type <code>\\q</code> to exit.</p> <pre><code>psql --username adr_db_usr --password --host localhost adr\n</code></pre> <p>Example output:</p> <pre><code>Password:\npsql (14.7 (Ubuntu 14.7-0ubuntu0.22.04.1))\nSSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)\nType \"help\" for help.\n\nadr=&gt;  \\conninfo\nYou are connected to database \"adr\" as user \"adr_db_usr\" on host \"localhost\" (address \"127.0.0.1\") at port \"5432\".\nSSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)\nadr=&gt; \\q\n</code></pre>"},{"location":"admin/install/#installation","title":"Installation","text":"<p>This section of the documentation discusses installing and configuring the application itself.</p> <p>These instructions will guide you through the following actions:</p> <ul> <li>Establish an App root directory for the application environment</li> <li>Create an App <code>adr</code> system account</li> <li>Create a Python virtual environment (virtualenv)</li> <li>Install the App and all required Python packages</li> <li>Run the database schema migrations</li> <li>Aggregate static resource files on disk</li> <li>Verify the installation using the development/test server</li> </ul> <p>Important</p> <p>Your database server and Redis must have been successfully installed before continuing with deployment steps. If you haven't done that yet, please visit the guide on installing the App Prerequisites</p>"},{"location":"admin/install/#choose-your-adr_root","title":"Choose your <code>ADR_ROOT</code>","text":"<p>You need to select a directory path where everything related to the ADR App will be installed. We will use this value across the documentation and it will be referred to as <code>ADR_ROOT</code>.</p> <p>We will be using this path as the home directory of the <code>adr</code> user.</p> <p>Tip</p> <p>We have selected <code>/opt/adr</code>, but you may use any directory you choose.</p> <p>Later on, we will need to set this directory path as the <code>ADR_ROOT</code> environment variable to tell the ADR App where to find its files and settings.</p>"},{"location":"admin/install/#create-the-app-system-user","title":"Create the App System User","text":"<p>Create a system user account named <code>adr</code>. This user will own all of the App files, and the web services will be configured to run under this account.</p> <p>The following command also creates the <code>/opt/adr</code> directory and sets it as the home directory for the user.</p> <pre><code>sudo useradd --system --shell /bin/bash --create-home --home-dir /opt/adr adr\n</code></pre>"},{"location":"admin/install/#setup-the-virtual-environment","title":"Setup the Virtual Environment","text":"<p>A Python virtual environment or virtualenv is like a container for a set of Python packages. A virtualenv allows you to build environments suited to specific projects without interfering with system packages or other projects.</p> <p>When installed per the documentation, the ADR App uses a virtual environment in production.</p> <p>In the following steps, we will have you create the virtualenv within the <code>ADR_ROOT</code> you chose in the previous step. This is the same we had you set as the home directory as the <code>adr</code> user.</p> <p>Note</p> <p>Instead of deliberately requiring you to activate/deactivate the virtualenv, we are emphasizing on relying on the <code>$PATH</code> to access programs installed within it. We find this to be much more intuitive and natural when working with the App in this way.</p>"},{"location":"admin/install/#create-the-virtual-environment","title":"Create the Virtual Environment","text":"<p>As root, we're going to create the virtualenv in our <code>ADR_ROOT</code> as the <code>adr</code> user to populate the <code>/opt/adr</code> directory with a self-contained Python environment including a <code>bin</code> directory for scripts and a <code>lib</code> directory for Python libraries.</p> <pre><code>sudo -u adr python3 -m venv /opt/adr\n</code></pre>"},{"location":"admin/install/#update-the-app-user-bashrc","title":"Update the App User <code>.bashrc</code>","text":"<p>So what about the <code>ADR_ROOT</code>? We've referenced this environment variable several times. Here is where it finally gets set.</p> <p>We need to set the <code>ADR_ROOT</code> environment variable for the <code>adr</code> user and make sure that it always set without having to do it manually.</p> <p>Run this command to update <code>~/.bashrc</code> for <code>adr</code> so that anytime you become <code>adr</code>, your <code>ADR_ROOT</code> will be set automatically.</p> <pre><code>echo \"export ADR_ROOT=/opt/adr\" | sudo tee -a ~adr/.bashrc\n</code></pre>"},{"location":"admin/install/#sudo-to-adr","title":"Sudo to adr","text":"<p>It is critical to install the ADR App as the <code>adr</code> user so that we don't have to worry about fixing permissions later.</p> <pre><code>sudo -iu adr\n</code></pre> <p>Observe also that you can now echo the value of the <code>ADR_ROOT</code> environment variable that is automatically set because we added to <code>.bashrc</code>:</p> <pre><code>echo $ADR_ROOT\n</code></pre> <p>Example output:</p> <pre><code>/opt/adr\n</code></pre> <p>Warning</p> <p>Unless explicitly stated, all remaining steps requiring the use of <code>pip3</code> or <code>python manage.py</code> in this document should be performed as the <code>adr</code> user!</p>"},{"location":"admin/install/#understanding-the-virtual-environment","title":"Understanding the Virtual Environment","text":"<p>Because the <code>adr</code> user was created with <code>ADR_ROOT</code> set as its home directory and we had you set the shell to <code>/bin/bash</code>, the binary path <code>$ADR_ROOT/bin</code> is automatically added to the beginning of the <code>$PATH</code> environment variable:</p> <p>In Ubuntu &gt;=20.04:</p> <pre><code>echo $PATH\n</code></pre> <p>Example output:</p> <pre><code>/opt/adr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin\n</code></pre> <p>Due to differences between OS, in CentOS <code>$PATH</code> will appear as:</p> <pre><code>echo $PATH\n</code></pre> <p>Example output:</p> <pre><code>/opt/adr/.local/bin:/opt/adr/bin:/opt/adr/.local/bin:/opt/adr/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin\n</code></pre> <p>Therefore, any commands executed by the <code>adr</code> user will always check <code>$ADR_ROOT/bin</code> first.</p> <p>Since <code>ADR_ROOT</code> also contains the Python virtualenv for the ADR App, all of the commands you will execute as the <code>adr</code> user, will automatically prefer the virtualenv's commands because they come first in the <code>$PATH</code>.</p> <p>As the <code>adr</code> user, you may use <code>which pip3</code> to confirm that you are using the correct version of <code>pip3</code>. The path should match that of <code>$ADR_ROOT/bin</code>. For example:</p> <pre><code>which pip3\n</code></pre> <p>Example output:</p> <pre><code>/opt/adr/bin/pip3\n</code></pre> <p>This makes sure that the version of Python you're using, as well any dependencies that you install, remain isolated in this environment.</p>"},{"location":"admin/install/#prepare-the-virtual-environment","title":"Prepare the Virtual Environment","text":"<p>Before we install anything into the virtualenv, we want to make sure that Pip is running the latest version.</p> <p>Pip is Python's package installer and is referred interchangeably as <code>pip</code> or <code>pip3</code>. For the purpose of this document, we'll deliberately be referring to it as <code>pip3</code>. Many common issues can be solved by running the latest version of Pip. Before continuing with installing the ADR App, upgrade Pip to its latest release.</p> <p>We also want to deliberately install the <code>wheel</code> library which will tell Pip to always try to install wheel packages if they are available. A wheel is a pre-compiled Python package, which is quicker and safer to install because it does not require development libraries or <code>gcc</code> to be installed on your system just so that some more advanced Python libraries can be compiled.</p> <pre><code>pip3 install --upgrade pip wheel\n</code></pre>"},{"location":"admin/install/#install-the-app","title":"Install the App","text":"<p>Developer Note - Remove Me!</p> <p>Detailed instructions on how to get the app from GitHub.</p> <p>Use Pip to install the requirements:</p> <pre><code>pip3 install architecture-decision-records\n</code></pre> <p>Great! We have <code>ADR_ROOT</code> ready for use by the <code>adr</code> user, so let's proceed to verifying the installation.</p>"},{"location":"admin/install/#verify-your-installation","title":"Verify your Installation","text":"<p>You should now have a  <code>adrs</code> (Architecture Decisions Records - Server)  command in your environment. This will be your gateway to all things for the architecture-decision-records! Run it to confirm the installed version of <code>architecture-decision-records</code>:</p> <pre><code>adrs --version\n</code></pre> <p>Example output:</p> <pre><code>0.1.0\n</code></pre>"},{"location":"admin/install/#configuration","title":"Configuration","text":"<p>Before you can use the ADR App, you'll need to configure it by telling it where your database can be found, among other things. This is done with the <code>adr_config.py</code> configuration file.</p>"},{"location":"admin/install/#initialize-your-configuration","title":"Initialize your configuration","text":"<p>Initialize a new configuration by running <code>adrs init</code>. You may specify an alternate location and detailed instructions for this are covered in the documentation on Configuration.</p> <p>However, because we've set the <code>ADR_ROOT</code>, this command will automatically create a new <code>adr_config.py</code> at the default location based on this at <code>$ADR_ROOT/adr_config.py</code>:</p> <pre><code>adrs init\nConfiguration file created at /opt/adr/adr_config.py\n</code></pre>"},{"location":"admin/install/#required-settings","title":"Required Settings","text":"<p>Your <code>adr_config.py</code> provides sane defaults for all of the configuration settings. You will inevitably need to update the settings for your environment, most notably the <code>DATABASES</code> setting. If you do not wish to modify the config, by default, many of these configuration settings can also be specified by environment variables. Please see Required Settings for further details.</p> <p>Edit <code>$ADR_ROOT/adr_config.py</code>, and head over to the documentation on Required Settings to tweak your required settings. At a minimum, you'll need to update the following settings:</p> <ul> <li><code>ALLOWED_HOSTS</code>: You must set this value. This can be set to <code>[\"*\"]</code> for a quick start, but this value is not suitable for production deployment.</li> <li><code>DATABASES</code>: Database connection parameters. If you installed your database server on the same system as the ADR App, you'll need to update the <code>USER</code> and <code>PASSWORD</code> fields here. If you are using MySQL, you'll also need to update the <code>ENGINE</code> field, changing the default database driver suffix from <code>django.db.backends.postgresql</code> to <code>django.db.backends.mysql</code>.</li> </ul> <p>Important</p> <p>You absolutely must update your required settings in your <code>adr_config.py</code> or the ADR App will __not work___.</p> <p>Save your changes to your <code>adr_config.py</code> and then proceed to the next step.</p>"},{"location":"admin/install/#prepare-the-database","title":"Prepare the Database","text":"<p>Before the App can run, the database migrations must be performed to prepare the database for use. This will populate the database tables and relationships:</p> <pre><code>adrs migrate\n</code></pre>"},{"location":"admin/install/#create-a-superuser","title":"Create a Superuser","text":"<p>The App does not come with any predefined user accounts. You'll need to create a administrative superuser account to be able to log into the App for the first time.</p> <pre><code>adrs createsuperuser\n</code></pre>"},{"location":"admin/install/#create-static-directories","title":"Create Static Directories","text":"<p>The App relies upon many static files including:</p> <ul> <li><code>media</code> - For storing uploaded images and attachments</li> <li><code>static</code> - The home for CSS, JavaScript, and images</li> </ul> <p>Each of these have their own corresponding setting that defined in <code>adr\\settings\\_base.py</code>, but by default they will all be placed in <code>ADR_ROOT</code> unless you specify otherwise by customizing their unique variable.</p> <p>The <code>collectstatic</code> command will create these directories if they do not exist, and in the case of the <code>static</code> files directory, it will also copy the appropriate files:</p> <pre><code>adrs collectstatic\n</code></pre>"},{"location":"admin/install/#check-your-configuration","title":"Check your Configuration","text":"<p>The ADR App leverages Django's built-in system check framework to validate the configuration to detect common problems and to provide hints for how to fix them.</p> <p>Checks are ran automatically when running a development server using <code>adrs runserver</code>, but not when running in production using WSGI.</p> <p>Hint</p> <p>Get into the habit of running checks before deployments! </p> <pre><code>adrs check\n</code></pre>"},{"location":"admin/install/#test-the-application","title":"Test the Application","text":"<p>At this point, we should be able to run the ADR App's development server for testing. We can check by starting a development instance:</p> <pre><code>adrs runserver 0.0.0.0:8080 --insecure\n</code></pre> <p>Next, connect to the name or IP of the server (as defined in <code>ALLOWED_HOSTS</code>) on port 8080; for example, http://127.0.0.1:8080/. You should be greeted with the Application home page.</p> <p>Danger</p> <p>DO NOT USE THIS SERVER IN A PRODUCTION SETTING. The development server is for development and testing purposes only. It is neither performant nor secure enough for production use.</p> <p>Warning</p> <p>If the test service does not run, or you cannot reach the ADR App home page, something has gone wrong. Do not proceed with the rest of this guide until the installation has been corrected. Some platforms (such as CentOS) have a firewall enabled by default. If you are unable to connect to the server url on port 8080, verify the firewall policy to allow the appropriate connections, or select an already permitted port.</p> <p>Note that the initial user interface will be locked down for non-authenticated users.</p> <p></p> <p>Try logging in using the superuser account we just created. Once authenticated, you'll be able to access all areas of the UI:</p> <p></p> <p>Type <code>Ctrl-C</code> to stop the development server. Now you're ready to proceed to starting the App as a system service.</p>"},{"location":"admin/selinux-troubleshooting/","title":"SELinux Troubleshooting","text":"<p>When installing for the first time on a Redhat-based Linux Distribution, SELinux may prevent the App stack from working properly. An example is SELinux preventing the HTTP daemon (NGINX, et al.) from communicating to the Django application stack on the backend.</p>"},{"location":"admin/selinux-troubleshooting/#determine-if-selinux-is-the-culprit","title":"Determine if SELinux is the Culprit","text":"<p>An example of a broken application can be seen in the Nginx error logs below:</p> <pre><code>sudo tail -f /var/log/nginx/error.log\n</code></pre> <p>Example output:</p> <pre><code>2021/02/26 15:16:55 [crit] 67245#0: *494 connect() to 127.0.0.1:8080 failed (13: Permission denied) while connecting to upstream, client: 47.221.167.40, server: adr.example.com, request: \"GET / HTTP/1.1\", upstream: \"http://127.0.0.1:8080/\", host: \"adr.example.com\"\n2021/02/26 15:16:56 [crit] 67245#0: *494 connect() to 127.0.0.1:8080 failed (13: Permission denied) while connecting to upstream, client: 47.221.167.40, server: adr.example.com, request: \"GET /favicon.ico HTTP/1.1\", upstream: \"http://127.0.0.1:8080/favicon.ico\", host: \"adr.example.com\", referrer: \"https://adr.example.com/\"\n2021/02/26 15:16:58 [crit] 67245#0: *544 connect() to 127.0.0.1:8080 failed (13: Permission denied) while connecting to upstream, client: 47.221.167.40, server: adr.example.com, request: \"GET / HTTP/1.1\", upstream: \"http://127.0.0.1:8080/\", host: \"adr.example.com\"\n2021/02/26 15:16:58 [crit] 67245#0: *544 connect() to 127.0.0.1:8080 failed (13: Permission denied) while connecting to upstream, client: 47.221.167.40, server: adr.example.com, request: \"GET /favicon.ico HTTP/1.1\", upstream: \"http://127.0.0.1:8080/favicon.ico\", host: \"adr.example.com\", referrer: \"https://adr.example.com/\"\n</code></pre> <p>A quick way to verify that SELinux is preventing the application from working is to first, verify that SELinux is indeed <code>enabled</code> and operating in <code>enforcing</code> mode, and second, temporarily put SELinux in <code>permissive</code> mode. With SELinux in <code>permissive</code> mode, the application stack can be tested again. If the application starts working as expected, then SELinux is most likely the culprit.</p> <pre><code># sestatus | egrep 'SELinux status|Current mode'\nSELinux status:                 enabled\nCurrent mode:                   enforcing\n</code></pre> <p>To put SELinux in <code>permissive</code> mode, execute the <code>setenforce</code> command with the <code>0</code> flag.</p> <pre><code># setenforce 0\n\n# sestatus | egrep 'SELinux status|Current mode'\nSELinux status:                 enabled\nCurrent mode:                   permissive\n</code></pre> <p>With SELinux in <code>permissive</code> mode, test the application stack and ensure everything is working properly. If the application is working, put SELinux back into <code>enforcing</code> mode. This is done by executing the <code>setenforce</code> command with the <code>1</code> flag.</p> <pre><code># setenforce 1\n\n# sestatus | egrep 'SELinux status|Current mode'\nSELinux status:                 enabled\nCurrent mode:                   enforcing\n</code></pre>"},{"location":"admin/selinux-troubleshooting/#troubleshoot-selinux","title":"Troubleshoot SELinux","text":"<p>Troubleshooting SELinux in most instances is straightforward. Using the <code>sealert</code> command to parse <code>/var/log/audit/audit.log</code> is the fastest way to pin-point SELinux specific issues. In many cases, <code>sealert</code> will also provide guidance as to how to resolve the issue.</p> <pre><code># sealert -a /var/log/audit/audit.log\n100% done\nfound 1 alerts in /var/log/audit/audit.log\n--------------------------------------------------------------------------------\n\nSELinux is preventing /usr/sbin/nginx from name_connect access on the tcp_socket port 8080.\n\n*****  Plugin connect_ports (85.9 confidence) suggests   *********************\n\nIf you want to allow /usr/sbin/nginx to connect to network port 8080\nThen you need to modify the port type.\nDo\n# semanage port -a -t PORT_TYPE -p tcp 8080\n    where PORT_TYPE is one of the following: dns_port_t, dnssec_port_t, kerberos_port_t, ocsp_port_t.\n\n*****  Plugin catchall_boolean (7.33 confidence) suggests   ******************\n\nIf you want to allow httpd to can network connect\nThen you must tell SELinux about this by enabling the 'httpd_can_network_connect' boolean.\n\nDo\nsetsebool -P httpd_can_network_connect 1\n\n*****  Plugin catchall_boolean (7.33 confidence) suggests   ******************\n\nIf you want to allow nis to enabled\nThen you must tell SELinux about this by enabling the 'nis_enabled' boolean.\n\nDo\nsetsebool -P nis_enabled 1\n\n*****  Plugin catchall (1.35 confidence) suggests   **************************\n\nIf you believe that nginx should be allowed name_connect access on the port 8080 tcp_socket by default.\nThen you should report this as a bug.\nYou can generate a local policy module to allow this access.\nDo\nallow this access for now by executing:\n# ausearch -c 'nginx' --raw | audit2allow -M my-nginx\n# semodule -X 300 -i my-nginx.pp\n\n\nAdditional Information:\nSource Context                system_u:system_r:httpd_t:s0\nTarget Context                system_u:object_r:unreserved_port_t:s0\nTarget Objects                port 8080 [ tcp_socket ]\nSource                        nginx\nSource Path                   /usr/sbin/nginx\nPort                          8080\nHost                          &lt;Unknown&gt;\nSource RPM Packages           nginx-1.14.1-9.module_el8.0.0+184+e34fea82.x86_64\nTarget RPM Packages\nSELinux Policy RPM            selinux-policy-targeted-3.14.3-54.el8_3.2.noarch\nLocal Policy RPM              selinux-policy-targeted-3.14.3-54.el8_3.2.noarch\nSelinux Enabled               True\nPolicy Type                   targeted\nEnforcing Mode                Enforcing\nHost Name                     adr.example.com\nPlatform                      Linux adr.example.com\n                              4.18.0-240.1.1.el8_3.x86_64 #1 SMP Thu Nov 19\n                              17:20:08 UTC 2020 x86_64 x86_64\nAlert Count                   5\nFirst Seen                    2021-02-26 15:16:55 UTC\nLast Seen                     2021-02-26 15:23:12 UTC\nLocal ID                      b83bb817-85f6-4f5c-b6e0-eee3acc85504\n\nRaw Audit Messages\ntype=AVC msg=audit(1614352992.209:585): avc:  denied  { name_connect } for  pid=67245 comm=\"nginx\" dest=8080 scontext=system_u:system_r:httpd_t:s0 tcontext=system_u:object_r:unreserved_port_t:s0 tclass=tcp_socket permissive=0\n\n\ntype=SYSCALL msg=audit(1614352992.209:585): arch=x86_64 syscall=connect success=no exit=EACCES a0=12 a1=55d061477358 a2=10 a3=7ffc0c62296c items=0 ppid=67243 pid=67245 auid=4294967295 uid=988 gid=985 euid=988 suid=988 fsuid=988 egid=985 sgid=985 fsgid=985 tty=(none) ses=4294967295 comm=nginx exe=/usr/sbin/nginx subj=system_u:system_r:httpd_t:s0 key=(null)ARCH=x86_64 SYSCALL=connect AUID=unset UID=nginx GID=nginx EUID=nginx SUID=nginx FSUID=nginx EGID=nginx SGID=nginx FSGID=nginx\n\nHash: nginx,httpd_t,unreserved_port_t,tcp_socket,name_connect\n</code></pre> <p>In the first few lines of the audit, <code>sealert</code> details what SELinux is blocking and provides some options to remedy the issue. Since Nginx is communicating with the application via HTTP, the second option is the best option.</p> <pre><code>SELinux is preventing /usr/sbin/nginx from name_connect access on the tcp_socket port 8080.\n\n*****  Plugin connect_ports (85.9 confidence) suggests   *********************\n\nIf you want to allow /usr/sbin/nginx to connect to network port 8080\nThen you need to modify the port type.\nDo\n# semanage port -a -t PORT_TYPE -p tcp 8080\n    where PORT_TYPE is one of the following: dns_port_t, dnssec_port_t, kerberos_port_t, ocsp_port_t.\n\n*****  Plugin catchall_boolean (7.33 confidence) suggests   ******************\n\nIf you want to allow httpd to can network connect\nThen you must tell SELinux about this by enabling the 'httpd_can_network_connect' boolean.\n\nDo\nsetsebool -P httpd_can_network_connect 1\n</code></pre> <p>Executing <code>setsebool -P httpd_can_network_connect 1</code> should remedy the issue. Verify this by executing the <code>setsebool</code> command, verify that SELinux is enabled and in <code>enforcing</code> mode via the <code>sestatus</code> command, and test the application stack for functionality.</p> <p>The first curl command demonstrates the failure. Nginx responds with a HTTP response code of 502, indicating that it is unable to communicate with the application. After executing the <code>setsebool</code> command, curl is used again to verify that Nginx is able to communicate with the application. This is verified with the HTTP response code of 200.</p> <pre><code># curl -ik https://adr.example.com\nHTTP/1.1 502 Bad Gateway\nServer: nginx/1.14.1\nDate: Fri, 26 Feb 2021 15:41:22 GMT\nContent-Type: text/html\nContent-Length: 173\nConnection: keep-alive\n\n\n# sestatus\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   enforcing\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      32\n\n\n# setsebool -P httpd_can_network_connect 1\n\n\n# curl -ik https://adr.example.com\nHTTP/1.1 200 OK\nServer: nginx/1.14.1\nDate: Fri, 26 Feb 2021 15:41:49 GMT\nContent-Type: text/html; charset=utf-8\nContent-Length: 18698\nConnection: keep-alive\nX-Content-Type-Options: nosniff\nReferrer-Policy: same-origin\nX-Frame-Options: DENY\nVary: Cookie, Origin\n</code></pre>"},{"location":"admin/service/","title":"Deploying the ADR App: Web Service and Workers","text":""},{"location":"admin/service/#services-overview","title":"Services Overview","text":"<p>Like most Django applications, the ADR App runs as a WSGI application behind an HTTP server.</p> <p>The ADR App comes pre-installed with uWSGI to use as the WSGI server, however other WSGI servers are available and should work similarly well. Gunicorn is a popular alternative.</p> <p>This document will guide you through setting up uWSGI and establishing the ADR App web service to run on system startup.</p>"},{"location":"admin/service/#web-service","title":"Web Service","text":"<p>The ADR App includes an <code>adrs start</code> management command that directly invokes uWSGI. This command behaves exactly as uWSGI does, but allows us to maintain a single entrypoint into the ADR App application.</p> <pre><code>adrs start --help\n</code></pre>"},{"location":"admin/service/#configuration","title":"Configuration","text":"<p>As the <code>adr</code> user, copy and paste the following into <code>$ADR_ROOT/uwsgi.ini</code>:</p> <pre><code>[uwsgi]\n; The IP address (typically localhost) and port that the WSGI process should listen on\nsocket = 127.0.0.1:8001\n\n; Fail to start if any parameter in the configuration file isn\u2019t explicitly understood by uWSGI\nstrict = true\n\n; Enable master process to gracefully re-spawn and pre-fork workers\nmaster = true\n\n; Allow Python app-generated threads to run\nenable-threads = true\n\n;Try to remove all of the generated file/sockets during shutdown\nvacuum = true\n\n; Do not use multiple interpreters, allowing only the ADR App to run\nsingle-interpreter = true\n\n; Shutdown when receiving SIGTERM (default is respawn)\ndie-on-term = true\n\n; Prevents uWSGI from starting if it is unable load the ADR App (usually due to errors)\nneed-app = true\n\n; By default, uWSGI has rather verbose logging that can be noisy\ndisable-logging = true\n\n; Assert that critical 4xx and 5xx errors are still logged\nlog-4xx = true\nlog-5xx = true\n\n; Enable HTTP 1.1 keepalive support\nhttp-keepalive = 1\n\n;\n; Advanced settings (disabled by default)\n; Customize these for your environment if and only if you need them.\n; Ref: https://uwsgi-docs.readthedocs.io/en/latest/Options.html\n;\n\n; Number of uWSGI workers to spawn. This should typically be 2n+1, where n is the number of CPU cores present.\n; processes = 5\n\n; If using subdirectory hosting e.g. example.com/the ADR App, you must uncomment this line. Otherwise you'll get double paths e.g. example.com/the ADR App/the ADR App/.\n; Ref: https://uwsgi-docs.readthedocs.io/en/latest/Changelog-2.0.11.html#fixpathinfo-routing-action\n; route-run = fixpathinfo:\n\n; If hosted behind a load balancer uncomment these lines, the harakiri timeout should be greater than your load balancer timeout.\n; Ref: https://uwsgi-docs.readthedocs.io/en/latest/HTTP.html?highlight=keepalive#http-keep-alive\n; harakiri = 65\n; add-header = Connection: Keep-Alive\n; http-keepalive = 1\n</code></pre> <p>This configuration should suffice for most initial installations, you may wish to edit this file to change the bound IP address and/or port number, or to make performance-related adjustments. See uWSGI documentation for the available configuration parameters.</p> <p>Note</p> <p> If you are deploying uWSGI behind a load balancer be sure to configure the harakiri timeout and keep alive appropriately.</p>"},{"location":"admin/service/#setup-systemd","title":"Setup systemd","text":"<p>We'll use <code>systemd</code> to control the application's uWSGI process.</p> <p>Warning</p> <p>The following steps must be performed with root permissions.</p>"},{"location":"admin/service/#the-adr-app-service","title":"The ADR App Service","text":"<p>Create the <code>systemd</code> unit file for the ADR App web service. Copy and paste the following into <code>/etc/systemd/system/adr.service</code>:</p> <pre><code>[Unit]\nDescription=ADR App WSGI Service\nDocumentation=https://docs.psmware.io/architecture-decision-records-app-dj\nAfter=network-online.target\nWants=network-online.target\n\n[Service]\nType=simple\nEnvironment=\"ADR_ROOT=/opt/adr\"\n\nUser=adr\nGroup=adr\nPIDFile=/var/tmp/adr.pid\nWorkingDirectory=/opt/adr\n\nExecStart=/opt/adr/bin/adrs start --pidfile /var/tmp/adr.pid --ini /opt/adr/uwsgi.ini\nExecStop=/opt/adr/bin/adrs start --stop /var/tmp/adr.pid\nExecReload=/opt/adr/bin/adrs start --reload /var/tmp/adr.pid\n\nRestart=on-failure\nRestartSec=30\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"admin/service/#configure-systemd","title":"Configure systemd","text":"<p>Because we just added new service files, you'll need to reload the systemd daemon:</p> <pre><code>sudo systemctl daemon-reload\n</code></pre> <p>Then, start the <code>adr.service</code> service and enable it to initiate at boot time:</p> <pre><code>sudo systemctl enable --now adr.service\n</code></pre>"},{"location":"admin/service/#verify-the-service","title":"Verify the service","text":"<p>You can use the command <code>systemctl status adr.service</code> to verify that the WSGI service is running:</p> <pre><code>adr.service - ADR App WSGI Service\n     Loaded: loaded (/etc/systemd/system/adr.service; enabled; vendor preset: enabled)\n     Active: active (running) since Wed 2023-04-12 19:10:27 UTC; 3s ago\n       Docs: https://docs.psmware.io/architecture-decision-records-app-dj\n   Main PID: 10400 (adrs)\n      Tasks: 2 (limit: 9406)\n     Memory: 36.4M\n        CPU: 292ms\n     CGroup: /system.slice/adr.service\n             \u251c\u250010400 /opt/adr/bin/python3 /opt/adr/bin/adrs start --pidfile /var/tmp/adr.pid --ini /opt/adr/uwsgi.ini\n             \u2514\u250010401 /opt/adr/bin/python3 /opt/adr/bin/adrs start --pidfile /var/tmp/adr.pid --ini /opt/adr/uwsgi.ini\n</code></pre> <p>Note</p> <p>If the ADR App service fails to start, issue the command <code>journalctl -eu adr</code> to check for log messages that may indicate the problem.</p> <p>Once you've verified that the WSGI service and worker are up and running, move on to HTTP server setup.</p>"},{"location":"admin/service/#troubleshooting","title":"Troubleshooting","text":""},{"location":"admin/service/#svg-images-not-rendered","title":"SVG images not rendered","text":"<p>When serving the ADR App directly from uWSGI on RedHat or CentOS there may be a problem rendering .svg images to include the ADR App logo. On the RedHat based operating systems there is no file <code>/etc/mime.types</code> by default, unfortunately, uWSGI looks for this file to serve static files (see Serving static files with uWSGI). To work around this copy the file <code>/etc/mime.types</code> from a known good system for example an Ubuntu/Debian system or even the ADR App container to /opt/the ADR App/mime.types. Then add the following line to your <code>uwsgi.ini</code> file and restart the ADR App services:</p> <pre><code>mime-file = /opt/adr/mime.types\n</code></pre> <p>Alternatively, host the ADR App behind Nginx as instructed in HTTP server setup.</p>"},{"location":"admin/uninstall/","title":"Uninstall the App from the ADR App","text":"<p>Here you will find any steps necessary to cleanly remove the App from your the ADR App environment.</p>"},{"location":"admin/uninstall/#uninstall-guide","title":"Uninstall Guide","text":"<p>Developer Note - Remove Me!</p> <p>Detailed instructions on how to remove the app.</p>"},{"location":"admin/uninstall/#database-clean-up","title":"Database Clean-up","text":"<p>Developer Note - Remove Me!</p> <p>Any clean-up operations to ensure the database is clean after the app is removed. Beyond deleting tables, is there anything else that needs cleaning up, such as CFs, relationships, etc. if they're no longer desired?</p>"},{"location":"admin/upgrade/","title":"Upgrading the App","text":"<p>Here you will find any steps necessary to upgrade the App in your the ADR App environment.</p>"},{"location":"admin/upgrade/#upgrade-guide","title":"Upgrade Guide","text":"<p>Developer Note - Remove Me!</p> <p>Add more detailed steps on how the app is upgraded in an existing the ADR App setup and any version specifics (such as upgrading between major versions with breaking changes).</p>"},{"location":"configuration/","title":"Configuration","text":"<p>This section describes how to get started with configuring the ADR App.</p>"},{"location":"configuration/#initializing-the-configuration","title":"Initializing the Configuration","text":"<p>An initial configuration can be created by executing <code>adrs init</code>. This will generate a new configuration with all of the default settings provided for you, and will also generate a unique <code>SECRET_KEY</code>.</p> <p>By default (if you haven't set <code>ADR_ROOT</code> to some other value), the file will be created at <code>$HOME/.adr/adr_config.py</code>:</p> <pre><code>adrs init\n</code></pre> <p>Example output:</p> <pre><code>Configuration file created at '/opt/adr/adr_config.py'\n</code></pre> <p>Tip</p> <p>The Installation Docs example sets <code>ADR_ROOT</code> to <code>/opt/adr</code>, so <code>adr_config.py</code> would be found at <code>/opt/adr/adr_config.py</code>.</p> <p>You may specify a different location for the configuration as the argument to <code>init</code>:</p> <pre><code>adrs init /tmp/custom_config.py\n</code></pre> <pre><code>Configuration file created at '/tmp/custom_config.py'\n</code></pre> <p>Note</p> <p>Throughout the documentation, the configuration file will be referred to by name as <code>adr_config.py</code>. If you use a custom file name, you must use that instead.</p>"},{"location":"configuration/#specifying-your-configuration","title":"Specifying your Configuration","text":"<p>If you place your configuration in the default location at <code>$HOME/.adr/adr_config.py</code>, you may utilize the <code>adrs</code> command and it will use that location automatically.</p> <p>If you do not wish to utilize the default location, you have two options:</p>"},{"location":"configuration/#environment-variable","title":"Environment variable","text":"<p>You may also set the <code>ADR_CONFIG</code> environment variable to the location of your configuration file so that you don't have to keep providing the <code>--config</code> argument. If set, this overrides the default location.</p> <pre><code>export ADR_CONFIG=/etc/adr_config.py\nadrs shell\n</code></pre>"},{"location":"configuration/#the-adr-app-root-directory","title":"The ADR App Root Directory","text":"<p>By default, the ADR App will always read or store files in <code>~/.adr</code> to allow for installation without requiring superuser (root) permissions.</p> <p>The <code>ADR_ROOT</code> configuration setting specifies where these files will be stored on your file system. You may customize this location by setting the <code>ADR_ROOT</code> environment variable. For example:</p> <pre><code>export ADR_ROOT=/opt/adr\n</code></pre> <p>This setting is also used in the  ADR App deployment guide to make the <code>adrs</code> command easier to find and use.</p> <p>Note</p> <p>The <code>--config</code> argument and the <code>adr_config</code> environment variable will always take precedence over <code>ADR_ROOT</code> for the purpose of telling ADR App where your <code>adr_config.py</code> can be found.</p> <p>Warning</p> <p>Do not override <code>ADR_ROOT</code> in your <code>adr_config.py</code>. It will not work as expected. If you need to customize this setting, please always set the <code>ADR_ROOT</code> environment variable.</p>"},{"location":"configuration/#configuration-parameters","title":"Configuration Parameters","text":"<p>While the ADR App has many configuration settings, only a few of them must be defined at the time of installation. These configuration parameters may be set in <code>adr_config.py</code> or by default many of them may also be set by environment variables. Please see the following links for more information:</p> <ul> <li>Required settings</li> <li>LDAP Authentication</li> </ul>"},{"location":"configuration/#changing-the-configuration","title":"Changing the Configuration","text":"<p>Configuration settings may be changed at any time. However, the WSGI service (e.g. uWSGI) must be restarted before the changes will take effect. For example, if you're running the ADR App using <code>systemd:</code></p> <pre><code>sudo systemctl restart adr.service\n</code></pre>"},{"location":"configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"configuration/#troubleshooting-the-configuration","title":"Troubleshooting the Configuration","text":"<p>To facilitate troubleshooting and debugging of settings, try inspecting the settings from a shell.</p> <p>First get a shell and load the Django settings:</p> <pre><code>adrs shell\n</code></pre> <p>Output:</p> <pre><code>Python 3.10.6 (main, Mar 10 2023, 10:55:28) [GCC 11.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n&gt;&gt;&gt;\n</code></pre> <p>Inspect the <code>SETTINGS_PATH</code> variable. Does it match the configuration you're expecting to be loading?</p> <pre><code>&gt;&gt;&gt; settings.SETTINGS_PATH\n'/home/example/.adr/adr_config.py'\n</code></pre> <p>If not, double check that you haven't set the <code>adr_config</code> environment variable, or if you did, that the path defined there is the correct one.</p> <pre><code>echo $adr_config\n</code></pre>"},{"location":"configuration/ldap/","title":"LDAP Authentication","text":"<p>This guide explains how to implement LDAP authentication using an external server. User authentication will fall back to built-in Django users in the event of a failure.</p>"},{"location":"configuration/ldap/#install-requirements","title":"Install Requirements","text":""},{"location":"configuration/ldap/#install-system-packages","title":"Install System Packages","text":"<p>On Ubuntu:</p> <pre><code>sudo apt install -y libldap-dev libsasl2-dev\n</code></pre> <p>On CentOS:</p> <pre><code>sudo dnf install -y openldap-devel\n</code></pre>"},{"location":"configuration/ldap/#install-django-auth-ldap","title":"Install django-auth-ldap","text":"<p>Warning</p> <p>This and all remaining steps in this document should all be performed as the <code>adr</code> user!  Hint: Use <code>sudo -iu adr</code></p> <p>Activate the Python virtual environment and install the <code>django-auth-ldap</code> package using pip:</p> <pre><code>source /opt/adr/bin/activate\npip3 install django-auth-ldap\n</code></pre> <p>Once installed, add the package to a <code>local_requirements.txt</code> to ensure it is re-installed during future rebuilds of the virtual environment:</p> <pre><code>echo \"django-auth-ldap\" &gt;&gt; /opt/adr/local_requirements.txt\n</code></pre>"},{"location":"configuration/ldap/#configuration","title":"Configuration","text":"<p>Enable the LDAP authentication backend by adding the following to your <code>adr_config.py</code>:</p>"},{"location":"configuration/ldap/#general-server-configuration","title":"General Server Configuration","text":"<p>Define all of the parameters required below in your <code>adr_config.py</code>. Complete documentation of all <code>django-auth-ldap</code> configuration options is included in the project's official documentation.</p> <p>Info</p> <p>When using Windows Server 2012 you may wish to use the Global Catalog by specifying a port on <code>AUTH_LDAP_SERVER_URI</code>. Use <code>3269</code> for secure (<code>ldaps://</code>), or <code>3268</code> for non-secure.</p> <pre><code>import ldap\n\n# Server URI\nAUTH_LDAP_SERVER_URI = \"ldap://ad.example.com\"\n\n# The following may be needed if you are binding to Active Directory.\nAUTH_LDAP_CONNECTION_OPTIONS = {\n    ldap.OPT_REFERRALS: 0\n}\n\n# Set the DN and password for the ADR App service account.\nAUTH_LDAP_BIND_DN = \"CN=ADRSA, OU=Service Accounts,DC=example,DC=com\"\nAUTH_LDAP_BIND_PASSWORD = \"demo\"\n</code></pre>"},{"location":"configuration/ldap/#encryption-options","title":"Encryption Options","text":"<p>It is recommended when using LDAP to use STARTTLS, however SSL can also be used.</p>"},{"location":"configuration/ldap/#tls-options","title":"TLS Options","text":"<p>STARTTLS can be configured by setting <code>AUTH_LDAP_START_TLS = True</code> and using the <code>ldap://</code> URI scheme.</p> <pre><code>AUTH_LDAP_SERVER_URI = \"ldap://ad.example.com\"\nAUTH_LDAP_START_TLS = True\n</code></pre>"},{"location":"configuration/ldap/#ssl-options","title":"SSL Options","text":"<p>SSL can also be used by using the <code>ldaps://</code> URI scheme.</p> <pre><code>AUTH_LDAP_SERVER_URI = \"ldaps://ad.example.com\"\n</code></pre>"},{"location":"configuration/ldap/#certificate-validation","title":"Certificate Validation","text":"<p>When using either TLS or SSL it is necessary to validate the certificate from your LDAP server. Copy your CA cert to <code>/opt/adr/ca.pem</code>.</p> <pre><code># Set the path to the trusted CA certificates and create a new internal SSL context.\nAUTH_LDAP_CONNECTION_OPTIONS = {\n    ldap.OPT_X_TLS_CACERTFILE: \"/opt/adr/ca.pem\",\n    ldap.OPT_X_TLS_NEWCTX: 0\n}\n</code></pre> <p>If you prefer you can ignore the certificate, however, this is only recommended in development and not production.</p> <pre><code># WARNING: You should not do this in production!\nAUTH_LDAP_CONNECTION_OPTIONS = {\n    ldap.OPT_X_TLS_REQUIRE_CERT: ldap.OPT_X_TLS_NEVER,\n}\n</code></pre> <p>Additional ldap connection options can be found in the python-ldap documentation.</p>"},{"location":"configuration/ldap/#user-authentication","title":"User Authentication","text":"<p>Info</p> <p>When using Windows Server 2012, <code>AUTH_LDAP_USER_DN_TEMPLATE</code> should be set to None.</p> <pre><code>from django_auth_ldap.config import LDAPSearch\n\n# This search matches users with the sAMAccountName equal to the provided username. This is required if the user's\n# username is not in their DN (Active Directory).\nAUTH_LDAP_USER_SEARCH = LDAPSearch(\"ou=Users,dc=example,dc=com\",\n                                    ldap.SCOPE_SUBTREE,\n                                    \"(sAMAccountName=%(user)s)\")\n\n# If a user's DN is producible from their username, we don't need to search.\nAUTH_LDAP_USER_DN_TEMPLATE = \"uid=%(user)s,ou=users,dc=example,dc=com\"\n\n# You can map user attributes to Django attributes as so.\nAUTH_LDAP_USER_ATTR_MAP = {\n    \"first_name\": \"givenName\",\n    \"last_name\": \"sn\",\n    \"email\": \"mail\"\n}\n</code></pre>"},{"location":"configuration/ldap/#searching-in-multiple-ldap-groups","title":"Searching in Multiple LDAP Groups","text":"<p>Define the user-groups in your environment, such as a <code>*.env</code> file (delimiter <code>';'</code>):</p> <pre><code># Groups to search for user objects. \"(sAMAccountName=%(user)s),...\"\nADR_AUTH_LDAP_USER_SEARCH_DN=OU=IT-Admins,OU=special-users,OU=Acme-User,DC=Acme,DC=local;OU=Infrastruktur,OU=IT,OU=my-location,OU=User,OU=Acme-User,DC=Acme,DC=local\n</code></pre> <p>Import LDAPSearchUnion in <code>adr_config.py</code>, and replace the AUTH_LDAP_USER_SEARCH command from above:</p> <pre><code>from django_auth_ldap.config import ..., LDAPSearchUnion\n\n# ...\n\nAUTH_LDAP_USER_SEARCH_DN = os.getenv(\"ADR_AUTH_LDAP_USER_SEARCH_DN\", \"\")\n\nif AUTH_LDAP_USER_SEARCH_DN != \"\":\n    user_search_dn_list = str(AUTH_LDAP_USER_SEARCH_DN).split(\";\")\n    ldapsearch_objects = []\n    for sdn in user_search_dn_list:\n        ldapsearch_objects.append(LDAPSearch(sdn.strip(), ldap.SCOPE_SUBTREE, \"(sAMAccountName=%(user)s)\"))\n    AUTH_LDAP_USER_SEARCH = LDAPSearchUnion(*ldapsearch_objects)\n</code></pre>"},{"location":"configuration/ldap/#user-groups-for-permissions","title":"User Groups for Permissions","text":"<p>Info</p> <p>When using Microsoft Active Directory, support for nested groups can be activated by using <code>NestedGroupOfNamesType()</code> instead of <code>GroupOfNamesType()</code> for <code>AUTH_LDAP_GROUP_TYPE</code>. You will also need to modify the import line to use <code>NestedGroupOfNamesType</code> instead of <code>GroupOfNamesType</code> .</p> <pre><code>from django_auth_ldap.config import LDAPSearch, GroupOfNamesType\n\n# This search ought to return all groups to which the user belongs. django_auth_ldap uses this to determine group\n# hierarchy.\nAUTH_LDAP_GROUP_SEARCH = LDAPSearch(\"dc=example,dc=com\", ldap.SCOPE_SUBTREE,\n                                    \"(objectClass=group)\")\nAUTH_LDAP_GROUP_TYPE = GroupOfNamesType()\n\n# Define a group required to login.\nAUTH_LDAP_REQUIRE_GROUP = \"CN=ADR_USERS,DC=example,DC=com\"\n\n# Define special user types using groups. Exercise great caution when assigning superuser status.\nAUTH_LDAP_USER_FLAGS_BY_GROUP = {\n    \"is_active\": \"cn=active,ou=groups,dc=example,dc=com\",\n    \"is_staff\": \"cn=staff,ou=groups,dc=example,dc=com\",\n    \"is_superuser\": \"cn=superuser,ou=groups,dc=example,dc=com\"\n}\n\n# For more granular permissions, we can map LDAP groups to Django groups.\nAUTH_LDAP_FIND_GROUP_PERMS = True\n\n# Cache groups for one hour to reduce LDAP traffic\nAUTH_LDAP_CACHE_TIMEOUT = 3600\n</code></pre> <ul> <li><code>is_active</code> - All users must be mapped to at least this group to enable authentication. Without this, users cannot log in.</li> <li><code>is_staff</code> - Users mapped to this group are enabled for access to the administration tools; this is the equivalent of checking the \"staff status\" box on a manually created user. This doesn't grant any specific permissions.</li> <li><code>is_superuser</code> - Users mapped to this group will be granted superuser status. Superusers are implicitly granted all permissions.</li> </ul> <p>Warning</p> <p>Authentication will fail if the groups (the distinguished names) do not exist in the LDAP directory.</p>"},{"location":"configuration/ldap/#multiple-ldap-server-support","title":"Multiple LDAP Server Support","text":"<p>Multiple servers can be supported in <code>django-auth-ldap</code> by the use of additional LDAP backends, as described in the library's documentation.</p> <p>In order to define and load additional backends into the ADR App a plugin can be used. This plugin will allow the backend(s) to be loaded into the Django settings for use within the <code>adr_config.py</code> file. At the simplest form the plugin should have a custom backend(s) defined:</p> <pre><code># my_customer_backends.py\n\nfrom django_auth_ldap.backend import LDAPBackend\n\nclass LDAPBackendSecondary(LDAPBackend):\n    settings_prefix = \"AUTH_LDAP_SECONDARY_\"\n</code></pre> <p>Once the custom backend is loaded into the settings all the configuration items mentioned previously need to be completed for each server. As a simplified example defining the URIs would be accomplished by the following two lines in the <code>adr_config.py</code> file. A similar approach would be done to define the rest of the settings.</p> <pre><code># adr_config.py\n\n# Server URI which uses django_auth_ldap.backend.LDAPBackend\nAUTH_LDAP_SERVER_URI = \"ldap://ad.example.com\"\n\n# Server URI which uses adr_ldap_plugin.my_customer_backends.LDAPBackendSecondary\nAUTH_LDAP_SECONDARY_SERVER_URI = \"ldap://secondary-ad.example.com\"\n</code></pre> <p>Info</p> <p>In this example the default LDAPBackend was still used as the first LDAP server, which utilized the <code>AUTH_LDAP_*</code> environment variables. It is also possible to remove the default backend and create multiple custom backends instead to normalize the environment variable naming scheme.</p>"},{"location":"configuration/ldap/#troubleshooting-ldap","title":"Troubleshooting LDAP","text":"<p><code>systemctl restart adr.service</code> restarts the adr service, and initiates any changes made to <code>adr_config.py</code>. If there are syntax errors present, the adr process will not spawn an instance, and errors should be logged to <code>/var/log/messages</code>.</p> <pre><code>LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'adr_auth_log': {\n            'level': 'DEBUG',\n            'class': 'logging.handlers.RotatingFileHandler',\n            'filename': '/opt/adr/logs/django-ldap-debug.log',\n            'maxBytes': 1024 * 500,\n            'backupCount': 5,\n        },\n    },\n    'loggers': {\n        'django_auth_ldap': {\n            'handlers': ['adr_auth_log'],\n            'level': 'DEBUG',\n        },\n    },\n}\n</code></pre> <p>Ensure the file and path specified in logfile exist and are writeable and executable by the application service account. Restart the adr service and attempt to log into the site to trigger log entries to this file.</p>"},{"location":"configuration/required-settings/","title":"Required Configuration Settings","text":""},{"location":"configuration/required-settings/#allowed_hosts","title":"ALLOWED_HOSTS","text":"<p>This is a list of valid fully-qualified domain names (FQDNs) and/or IP addresses that can be used to reach the ADR App service. Usually this is the same as the hostname for the ADR App server, but can also be different; for example, when using a reverse proxy serving the ADR App website under a different FQDN than the hostname of the ADR App server. To help guard against HTTP Host header attacks, the ADR App will not permit access to the server via any other hostnames (or IPs).</p> <p>Keep in mind that by default the ADR App sets <code>USE_X_FORWARDED_HOST</code> to <code>True</code>, which means that if you're using a reverse proxy, the FQDN used to reach that reverse proxy needs to be in this list.</p> <p>Note</p> <p>This parameter must always be defined as a list or tuple, even if only a single value is provided.</p> <p>Example:</p> <pre><code>ALLOWED_HOSTS = ['adr.example.com', '192.0.2.123']\n</code></pre> <p>Tip</p> <p>If there is more than one hostname in this list, you may also need to set <code>CSRF_TRUSTED_ORIGINS</code> as well.</p> <p>If you are not yet sure what the domain name and/or IP address of the ADR App installation will be, and are comfortable accepting the risks in doing so, you can set this to a wildcard (asterisk) to allow all host values:</p> <pre><code>ALLOWED_HOSTS = ['*']\n</code></pre> <p>Warning</p> <p>It is not recommended to leave this value as <code>['*']</code> for production deployments. Please see the official Django documentation on <code>ALLOWED_HOSTS</code> for help.</p> <p>The following Environment Variable: <code>ADR_ALLOWED_HOSTS</code> specified as a space-separated quoted string (e.g. <code>ADR_ALLOWED_HOSTS=\"localhost 127.0.0.1 example.com\"</code>) may be used for this setting.</p>"},{"location":"configuration/required-settings/#databases","title":"DATABASES","text":"<p>The ADR App requires access to a PostgreSQL database service to store data. This service can run locally on the ADR App server or on a remote system. The following parameters must be defined within the <code>DATABASES</code> dictionary:</p> <ul> <li><code>NAME</code> - Database name</li> <li><code>USER</code> - Database username</li> <li><code>PASSWORD</code> - Database password</li> <li><code>HOST</code> - Name or IP address of the database server (use <code>localhost</code> if running locally)</li> <li><code>PORT</code> - The port to use when connecting to the database. An empty string means the default port for your selected backend. (PostgreSQL: <code>5432</code>)</li> <li><code>CONN_MAX_AGE</code> - Lifetime of a persistent database connection, in seconds (300 is the default)</li> </ul> <p>The following environment variables may also be set for each of the above values:</p> <ul> <li><code>ADR_DB_NAME</code></li> <li><code>ADR_DB_USER</code></li> <li><code>ADR_DB_PASSWORD</code></li> <li><code>ADR_DB_HOST</code></li> <li><code>ADR_DB_PORT</code></li> <li><code>ADR_DB_TIMEOUT</code></li> </ul> <p>Example:</p> <pre><code>DATABASES = {\n    'default': {\n        'NAME': 'adr_db',                           # Database name\n        'USER': 'adr_db_user',                      # Database username\n        'PASSWORD': 'awesomely_secure_password',    # Database password\n        'HOST': 'localhost',                        # Database server\n        'PORT': '',                                 # Database port (leave blank for default)\n        'CONN_MAX_AGE': 300,                        # Max database connection age\n    }\n}\n</code></pre> <p>Note</p> <p>The ADR App supports all database options supported by the underlying Django framework. For a complete list of available parameters, please see the official Django documentation on <code>DATABASES</code>.</p>"},{"location":"configuration/required-settings/#secret_key","title":"SECRET_KEY","text":"<p>Environment Variable: <code>ADR_SECRET_KEY</code></p> <p>This is a secret, random string used to assist in the creation new cryptographic hashes for passwords and HTTP cookies. The key defined here should not be shared outside of the configuration file. <code>SECRET_KEY</code> can be changed at any time, however be aware that doing so will invalidate all existing sessions.</p> <p><code>SECRET_KEY</code> should be at least 50 characters in length and contain a random mix of letters, digits, and symbols.</p> <p>Note</p> <p>A unique <code>SECRET_KEY</code> is generated for you automatically when you use <code>adrs init</code> to create a new <code>adr_config.py</code>.</p> <p>You may run <code>adrs generate_secret_key</code> to generate a new key at any time.</p> <p>Alternatively use the following command to generate a secret even before <code>adrs</code> is runnable:</p> <pre><code>LC_ALL=C tr -cd '[:lower:][:digit:]!@#$%^&amp;*(\\-_=+)' &lt; /dev/urandom | fold -w50 | head -n1\n</code></pre> <p>Example output:</p> <pre><code>9.V$@Kxkc@@Kd@z&lt;a/=.J-Y;rYc79&lt;y@](9o9(L(*sS)Q+ud5P\n</code></pre> <p>Warning</p> <p>In the case of a highly available installation with multiple web servers, <code>SECRET_KEY</code> must be identical among all servers in order to maintain a persistent user session state.</p>"},{"location":"dev/contributing/","title":"Contributing to the App","text":"<p>Developer Note - Remove Me!</p> <p>Information on how to contribute fixes, functionality, or documentation changes back to the project.</p> <p>The project is packaged with a light development environment based on <code>docker-compose</code> to help with the local development of the project and to run tests.</p> <p>The project is following Network to Code software development guidelines and is leveraging the following:</p> <ul> <li>Python linting and formatting: <code>black</code>, <code>pylint</code>, <code>bandit</code>, <code>flake8</code>, and <code>pydocstyle</code>.</li> <li>YAML linting is done with <code>yamllint</code>.</li> <li>Django unit test to ensure the plugin is working properly.</li> </ul> <p>Documentation is built using mkdocs. The Docker based development environment automatically starts a container hosting a live version of the documentation website on http://localhost:8001 that auto-refreshes when you make any changes to your local files.</p>"},{"location":"dev/contributing/#branching-policy","title":"Branching Policy","text":"<p>Developer Note - Remove Me!</p> <p>What branching policy is used for this project and where contributions should be made.</p>"},{"location":"dev/contributing/#release-policy","title":"Release Policy","text":"<p>Developer Note - Remove Me!</p> <p>How new versions are released.</p>"},{"location":"dev/design/","title":"Introduction","text":""},{"location":"dev/design/#purpose","title":"Purpose","text":"<p>An Architectural Decision (AD) is a design choice that addresses a functional or non-functional requirement that is architecturally significant. This might, for instance, be a routing protocol choice (e.g., ospf vs bgp vs eigrp), a choice of the Infrastructure Device (e.g., Cisco vs. Arista), or a decision on features. Do not take the term \u201carchitecture\u201d too seriously or interpret it too strongly. As the examples illustrate, any decisions that might have an impact on the architecture somehow are architectural decisions.</p> <p>It should be as easy as possible to</p> <ol> <li>write down the decisions</li> <li>to version the decisions</li> </ol> <p>There are debates what is an architecturally-significant decision and which decisions are not architecturally significant. Since we believe that any (important) decision should be captured in a structured way, we offer this ADR app to capture any decision.</p>"},{"location":"dev/design/#document-conventions","title":"Document Conventions","text":"<p>This document uses the following conventions.</p> Abbreviation Meaning UX User Experience (User Interface) ADR Architecture Design Records MADR Markdown Any Decision Records"},{"location":"dev/design/#intended-audience-and-reading-suggestions","title":"Intended Audience and Reading suggestions","text":"<p>This project is a prototype for and ADR app which will manage the creation, and management of Architecture Decision Records as described on the ADR</p>"},{"location":"dev/design/#project-scope","title":"Project Scope","text":"<p>The purpose of this project is to build an application to capture Architecture Decisions in a lean format for later reference</p>"},{"location":"dev/design/#overall-description","title":"Overall Description","text":""},{"location":"dev/design/#feature-perspective","title":"Feature Perspective","text":"<p>This app will follow the MADR lean template to capture any decisions in a structured way. The template originated from capturing architectural decisions and developed to a template allowing to capture any decisions taken.</p> <p></p>"},{"location":"dev/design/#characteristics","title":"Characteristics","text":"<ul> <li>Have a quick reference to understand what has been done in the past</li> <li>Allow us to share our thinking and methods with our stakeholders</li> <li>Maintain open and transparent communication inside and outside of our teams</li> </ul>"},{"location":"dev/design/#operating-environment-and-dependencies","title":"Operating Environment and Dependencies","text":"<p>The initial operating environment for the ADR app is as below:</p> <ul> <li>PostgreSQL DB hosted</li> <li>Django as the UX dashboard</li> </ul>"},{"location":"dev/design/#entity-relationship-diagram","title":"Entity Relationship Diagram","text":"<pre><code>---\ntitle: Architecture Decision Records ERD\n---\nerDiagram\n    DECISION_RECORD ||--|{ STATUS : contains\n    DECISION_RECORD ||--|{ APPROVERS : contains\n    DECISION_RECORD ||--|{ REVISION_HISTORY : contains\n    DECISION_RECORD {\n        UUID dr_id\n        UUID user_id\n        UUID stake_holder_id\n        UUID status_id\n        int dr_sequence\n        string dr_context\n        string dr_decision\n        datetime date_created\n        datetime date_updated\n        string workflow_payload\n    }\n    REVISION_HISTORY {\n        UUID history_id\n        UUID user_id\n        date date_of_revision\n        string name\n\n    }\n    STATUS {\n        UUID status_id\n        string status_name\n    }\n    APPROVERS {\n        UUID status_id\n        UUID user_id\n        date date_approved\n    }</code></pre>"},{"location":"dev/design/#design-and-implementation-constraints","title":"Design and Implementation Constraints","text":"<p>Follow the guiding principles here and here.</p>"},{"location":"dev/dev_environment/","title":"Building Your Development Environment","text":""},{"location":"dev/dev_environment/#quickstart-guide","title":"Quickstart Guide","text":"<p>The development environment can be used in two ways:</p> <ol> <li>(Recommended) All services, including the Django App, are spun up using Docker containers and a volume mount so you can develop locally.</li> <li>With a local Poetry environment if you wish to develop outside of Docker, with the caveat of using external services provided by Docker for the PostgreSQL database service.</li> </ol> <p>This is a quick reference guide if you're already familiar with the development environment provided, which you can read more about later in this document.</p>"},{"location":"dev/dev_environment/#invoke","title":"Invoke","text":"<p>The Invoke library is used to provide some helper commands based on the environment. There are a few configuration parameters which can be passed to Invoke to override the default configuration:</p> <ul> <li><code>project_name</code>: the default docker compose project name (default: <code>wmf</code>)</li> <li><code>python_ver</code>: the version of Python to use as a base for any built docker containers (default: 3.8)</li> <li><code>local</code>: a boolean flag indicating if invoke tasks should be run on the host or inside the docker containers (default: False, commands will be run in docker containers)</li> <li><code>compose_dir</code>: the full path to a directory containing the project compose files</li> <li><code>compose_files</code>: a list of compose files applied in order (see Multiple Compose files for more information)</li> </ul> <p>Using Invoke these configuration options can be overridden using several methods. Perhaps the simplest is setting an environment variable <code>INVOKE_WMF_VARIABLE_NAME</code> where <code>VARIABLE_NAME</code> is the variable you are trying to override. The only exception is <code>compose_files</code>, because it is a list it must be overridden in a YAML file. There is an example <code>invoke.yml</code> (<code>invoke.example.yml</code>) in this directory which can be used as a starting point.</p>"},{"location":"dev/dev_environment/#docker-development-environment","title":"Docker Development Environment","text":"<p>Tip</p> <p>This is the recommended option for development.</p> <p>This project is managed by Python Poetry and has a few requirements to setup your development environment:</p> <ol> <li>Install Poetry, see the Poetry Documentation for your operating system.</li> <li>Install Docker, see the Docker documentation for your operating system.</li> </ol> <p>Once you have Poetry and Docker installed you can run the following commands (in the root of the repository) to install all other development dependencies in an isolated Python virtual environment:</p> <pre><code>poetry shell\npoetry install\ncp development/creds.example.env development/creds.env\ninvoke build\ninvoke start\n</code></pre> <p>The Django app can now be accessed at http://localhost:8080 and the live documentation at http://localhost:8001.</p> <p>To either stop or destroy the development environment use the following options.</p> <ul> <li>invoke stop - Stop the containers, but keep all underlying systems intact</li> <li>invoke destroy - Stop and remove all containers, volumes, etc. (This results in data loss due to the volume being deleted)</li> </ul>"},{"location":"dev/dev_environment/#local-poetry-development-environment","title":"Local Poetry Development Environment","text":"<ul> <li>Create an <code>invoke.yml</code> file with the following contents at the root of the repo and edit as necessary</li> </ul> <p>Run the following commands:</p> <pre><code>poetry shell\npoetry install\nexport $(cat development/dev.env | xargs)\nexport $(cat development/creds.env | xargs)\ninvoke start &amp;&amp; sleep 5\npython manage.py migrate\n</code></pre> <p>You can now run <code>python manage.py</code> commands as you would from the Django documentation for example to start the development server:</p> <pre><code>python manage.py runserver 0.0.0.0:8080 --insecure\n</code></pre> <p>The Django app can now be accessed at http://localhost:8080.</p> <p>It is typically recommended to launch the runserver command in a separate shell so you can keep developing and manage the webserver separately.</p>"},{"location":"dev/dev_environment/#updating-the-documentation","title":"Updating the Documentation","text":"<p>Documentation dependencies are pinned to exact versions to ensure consistent results. For the development environment, they are defined in the <code>pyproject.toml</code> file.</p>"},{"location":"dev/dev_environment/#cli-helper-commands","title":"CLI Helper Commands","text":"<p>The project features a CLI helper based on Invoke to help setup the development environment. The commands are listed below in 3 categories:</p> <ul> <li><code>dev environment</code></li> <li><code>utility</code></li> <li><code>testing</code></li> </ul> <p>Each command can be executed with <code>invoke &lt;command&gt;</code>. All commands support the arguments <code>--python-ver</code> if you want to manually define the version of Python to use. Each command also has its own help <code>invoke &lt;command&gt; --help</code></p>"},{"location":"dev/dev_environment/#local-development-environment","title":"Local Development Environment","text":"<pre><code>  build            Build all docker images.\n  debug            Start the app and its dependencies in debug mode.\n  destroy          Destroy all containers and volumes.\n  restart          Restart the app and its dependencies in detached mode.\n  start            Start the app and its dependencies in detached mode.\n  stop             Stop the app and its dependencies.\n</code></pre>"},{"location":"dev/dev_environment/#utility","title":"Utility","text":"<pre><code>  cli              Launch a bash shell inside the running the app container.\n  create-user      Create a new user in django (default: admin), will prompt for password.\n  makemigrations   Run Make Migration in Django.\n  migrate   Run Migrations in Django.\n</code></pre>"},{"location":"dev/dev_environment/#testing","title":"Testing","text":"<pre><code>  bandit           Run bandit to validate basic static code security analysis.\n  black            Run black to check that Python files adhere to its style standards.\n  flake8           Run flake8 to check that Python files adhere to its style standards.\n  pydocstyle       Run pydocstyle to validate docstring formatting adheres to NTC defined standards.\n  pylint           Run pylint code analysis.\n  tests            Run all tests for this plugin.\n  unittest         Run Django unit tests for the plugin.\n</code></pre>"},{"location":"dev/dev_environment/#project-overview","title":"Project Overview","text":"<p>This project provides the ability to develop and manage the app server locally (with supporting services being Dockerised) or by using only Docker containers to manage the app. The main difference between the two environments is the ability to debug and use pdb when developing locally. Debugging with pdb within the Docker container is more complicated, but can still be accomplished by either entering into the container (via <code>docker exec</code>) or attaching your IDE to the container and running the the app service manually within the container.</p> <p>The upside to having the app service handled by Docker rather than locally is that you do not have to manage the app server. The Docker logs provide the majority of the information you will need to help troubleshoot, while getting started quickly and not requiring you to perform several manual steps and remembering to have the app server running in a separate terminal while you develop.</p> <p>Note</p> <p>The local environment still uses Docker containers for the supporting services (Postgres, Redis, and RQ Worker), but the Django App server is handled locally by you, the developer.</p> <p>Follow the directions below for the specific development environment that you choose.</p>"},{"location":"dev/dev_environment/#poetry","title":"Poetry","text":"<p>Poetry is used in lieu of the \"virtualenv\" commands and is leveraged in both environments. The virtual environment will provide all of the Python packages required to manage the development environment such as Invoke. See the Local Development Environment section to see how to install the app if you're going to be developing locally (i.e. not using the Docker container).</p> <p>The <code>pyproject.toml</code> file outlines all of the relevant dependencies for the project:</p> <ul> <li><code>tool.poetry.dependencies</code> - the main list of dependencies.</li> <li><code>tool.poetry.dev-dependencies</code> - development dependencies, to facilitate linting, testing, and documentation building.</li> </ul> <p>The <code>poetry shell</code> command is used to create and enable a virtual environment managed by Poetry, so all commands ran going forward are executed within the virtual environment. This is similar to running the <code>source venv/bin/activate</code> command with virtualenvs. To install project dependencies in the virtual environment, you should run <code>poetry install</code> - this will install both project and development dependencies.</p> <p>For more details about Poetry and its commands please check out its online documentation.</p>"},{"location":"dev/dev_environment/#full-docker-development-environment","title":"Full Docker Development Environment","text":"<p>This project is set up with a number of Invoke tasks consumed as simple CLI commands to get developing fast. You'll use a few <code>invoke</code> commands to get your environment up and running.</p>"},{"location":"dev/dev_environment/#copy-the-credentials-file-for-the-app","title":"Copy the credentials file for the app","text":"<p>First, you need to create the <code>development/creds.env</code> file - it stores a bunch of private information such as passwords and tokens for your local the app install. You can make a copy of the <code>development/creds.example.env</code> and modify it to suit you.</p> <pre><code>cp development/creds.example.env development/creds.env\n</code></pre>"},{"location":"dev/dev_environment/#building-the-docker-image","title":"Building the Docker Image","text":"<p>The first thing you need to do is build the necessary Docker image for the app that installs the specific <code>python_ver</code>. The image is used for django and the docs used by Docker Compose.</p> <pre><code>\u279c invoke build\n... &lt;omitted for brevity&gt;\n#19 exporting to image\n#19 exporting layers\n#19 exporting layers 2.5s done\n#19 writing image sha256:5e1e326448501f8769f575ff0b61240c6fd09ca8b5a1291b969833b459f5c881 done\n#19 naming to docker.io/library/adrs:py3.10\n#19 naming to docker.io/library/adrs:py3.10 done\n#19 DONE 2.5s\n</code></pre>"},{"location":"dev/dev_environment/#starting-the-development-environment","title":"Starting the Development Environment","text":"<p>Next, you need to start up your Docker containers.</p> <pre><code>\u279c invoke start\nStarting NSE ADR in detached mode...\nRunning docker-compose command \"up --detach\"\nNetwork adrs_default  Creating\nNetwork adrs_default  Created\nVolume \"adrs_postgres_data\"  Creating\nVolume \"adrs_postgres_data\"  Created\nContainer adrs-docs  Creating\nContainer adrs-db  Creating\nContainer adrs-ad  Creating\nContainer adrs-db  Created\nContainer adrs-api  Creating\nContainer adrs-docs  Created\nContainer adrs-ad  Created\nContainer adrs-api  Created\nContainer adrs-ad  Starting\nContainer adrs-db  Starting\nContainer adrs-docs  Starting\nContainer adrs-db  Started\nContainer adrs-api  Starting\nContainer adrs-ad  Started\nContainer adrs-docs  Started\nContainer adrs-api  Started\n</code></pre> <p>This will start all of the Docker containers used for hosting the app. You should see the following containers running after <code>invoke start</code> is finished.</p> <pre><code>\u279c docker ps\n____CONTAINER ID   IMAGE                            COMMAND                  CREATED          STATUS          PORTS                                       NAMES\nff72cd6641e2   adrs:py3.10                                   \"python manage.py ru\u2026\"   39 seconds ago   Up 35 seconds   0.0.0.0:8080-&gt;8080/tcp    adrs-api\nb230d54faa75   adrs:py3.10                                   \"mkdocs serve -v -a \u2026\"   39 seconds ago   Up 38 seconds   0.0.0.0:8001-&gt;8080/tcp    adrs-docs\nb2e7b28ddc39   active-directory-it:develop                       \"java -jar ldap-serv\u2026\"   39 seconds ago   Up 38 seconds   389/tcp                   adrs-ad\ncf1b7b9c8f44   postgres:14-alpine                                \"docker-entrypoint.s\u2026\"   39 seconds ago   Up 38 seconds   0.0.0.0:56269-&gt;5432/tcp   adrs-db\n</code></pre> <p>Once the containers are fully up, you should be able to open up a web browser, and view:</p> <ul> <li>The app homepage at http://localhost:8080</li> <li>A live version of the documentation at http://localhost:8001</li> </ul> <p>Note</p> <p>Sometimes the containers take a minute or two, to fully spin up. If the page doesn't load right away, wait a minute and try again.</p>"},{"location":"dev/dev_environment/#creating-a-superuser","title":"Creating a Superuser","text":"<p>If you need to create a superuser, run the follow commands.</p> <pre><code>\u279c invoke createsuperuser\nRunning docker-compose command \"ps --services --filter status=running\"\nRunning docker-compose command \"run --entrypoint 'python manage.py createsuperuser --username admin' adrs-api\"\nEmail address: email@example.com\nPassword (again):\nSuperuser created successfully.\n</code></pre>"},{"location":"dev/dev_environment/#invoke-stopping-the-development-environment","title":"Invoke - Stopping the Development Environment","text":"<p>The last command to know for now is <code>invoke stop</code>.</p> <pre><code>\u279c invoke stop\nStopping Dev Env...\nRunning docker-compose command \"down\"\nContainer adrs-docs  Stopping\nContainer adrs-ad  Stopping\nContainer adrs-api  Stopping\nContainer adrs-ad  Stopping\nContainer adrs-api  Stopping\nContainer adrs-docs  Stopping\nContainer adrs-api  Stopped\nContainer adrs-api  Removing\nContainer adrs-api  Removed\nContainer adrs-db  Stopping\nContainer adrs-db  Stopping\nContainer adrs-db  Stopped\nContainer adrs-db  Removing\nContainer adrs-db  Removed\nContainer adrs-ad  Stopped\nContainer adrs-ad  Removing\nContainer adrs-ad  Removed\nContainer adrs-docs  Stopped\nContainer adrs-docs  Removing\nContainer adrs-docs  Removed\nNetwork adrs_default  Removing\nNetwork adrs_default  Removed\n</code></pre> <p>This will safely shut down all of your running Docker containers for this project. When you are ready to spin containers back up, it is as simple as running <code>invoke start</code> again as seen previously.</p> <p>Warning</p> <p>If you're wanting to reset the database and configuration settings, you can use the <code>invoke destroy</code> command, but you will lose any data stored in those containers, so make sure that is what you want to do.</p>"},{"location":"dev/dev_environment/#real-time-updates-how-cool","title":"Real-Time Updates? How Cool","text":"<p>Your environment should now be fully setup, all necessary Docker containers are created and running, and you're logged into the app in your web browser. Now what?</p> <p>Now you can start developing  in the project folder!</p> <p>The magic here is the root directory is mounted inside your Docker containers when built and ran, so any changes made to the files in here are directly updated to the app plugin code running in Docker. This means that as you modify the code in your plugin folder, the changes will be instantly updated in the app.</p> <p>Warning</p> <p>There are a few exceptions to this, as outlined in the section To Rebuild or Not To Rebuild.</p> <p>The back-end Django process is setup to automatically reload itself (it only takes a couple of seconds) every time a file is updated (saved). So for example, if you were to update one of the files like <code>models.py</code>, then save it, the changes will be visible right away in the web browser!</p> <p>Info</p> <p>You may get connection refused while Django reloads, but it should be refreshed fairly quickly.</p>"},{"location":"dev/dev_environment/#docker-logs","title":"Docker Logs","text":"<p>When trying to debug an issue, one helpful thing you can look at are the logs within the Docker containers.</p> <pre><code>\u279c docker logs &lt;name of container&gt; -f\n</code></pre> <p>Note</p> <p>The <code>-f</code> tag will keep the logs open, and output them in realtime as they are generated.</p> <p>So for example, our plugin is named <code>wmf</code>, the command would most likely be <code>docker logs adrs-api -f</code>. You can find the name of all running containers via <code>docker ps</code>.</p> <p>If you want to view the logs specific to the worker container, simply use the name of that container instead.</p>"},{"location":"dev/dev_environment/#to-rebuild-or-not-to-rebuild","title":"To Rebuild or Not to Rebuild","text":"<p>Most of the time, you will not need to rebuild your images. Simply running <code>invoke start</code> and <code>invoke stop</code> is enough to keep your environment going.</p> <p>However there are a couple of instances when you will want to.</p>"},{"location":"dev/dev_environment/#updating-environment-variables","title":"Updating Environment Variables","text":"<p>To add environment variables to your containers, thus allowing the app to use them, you will update/add them in the <code>development/development.env</code> file. However, doing so is considered updating the underlying container shell, instead of Django (which auto restarts itself on changes).</p> <p>To get new environment variables to take effect, you will need stop any running images, rebuild the images, then restart them. This can easily be done with 3 commands:</p> <pre><code>\u279c invoke stop\n\u279c invoke build\n\u279c invoke start\n</code></pre> <p>Once completed, the new/updated environment variables should now be live.</p>"},{"location":"dev/dev_environment/#installing-additional-python-packages","title":"Installing Additional Python Packages","text":"<p>If you want your plugin to leverage another Python package, you can easily add them into your Docker environment.</p> <pre><code>\u279c poetry shell\n\u279c poetry add &lt;package_name&gt;\n</code></pre> <p>Once the dependencies are resolved, stop the existing containers, rebuild the Docker image, and then start all containers again.</p> <pre><code>\u279c invoke stop\n\u279c invoke build\n\u279c invoke start\n</code></pre>"},{"location":"dev/dev_environment/#updating-python-version","title":"Updating Python Version","text":"<p>To update the Python version, you can update it within <code>tasks.py</code>.</p> <pre><code>namespace = Collection(\"wmf\")\nnamespace.configure(\n    {\n        \"wmf\": {\n            ...\n            \"python_ver\": \"3.7\",\n     ...\n        }\n    }\n)\n</code></pre>"},{"location":"dev/dev_environment/#other-miscellaneous-commands-to-know","title":"Other Miscellaneous Commands To Know","text":""},{"location":"dev/dev_environment/#python-shell","title":"Python Shell","text":"<p>To drop into a shell (in the Django Docker container) run:</p> <pre><code>\u279c invoke cli\n</code></pre>"},{"location":"dev/dev_environment/#tests","title":"Tests","text":"<p>To run tests against your code, you can run all of the tests with:</p> <pre><code>\u279c invoke tests\n</code></pre> <p>To run an individual test, you can run any or all of the following:</p> <pre><code>\u279c invoke unittest\n\u279c invoke bandit\n\u279c invoke black\n\u279c invoke flake8\n\u279c invoke pydocstyle\n\u279c invoke pylint\n</code></pre>"},{"location":"dev/extending/","title":"Extending the App","text":"<p>Developer Note - Remove Me!</p> <p>Information on how to extend the App functionality.</p> <p>Extending the application is welcome, however it is best to open an issue first, to ensure that a PR would be accepted and makes sense in terms of features and design.</p>"},{"location":"user/app_getting_started/","title":"Getting Started with the App","text":"<p>This document provides a step-by-step tutorial on how to get the App going and how to use it.</p>"},{"location":"user/app_getting_started/#install-the-app","title":"Install the App","text":"<p>To install the App, please follow the instructions detailed in the Installation Guide.</p>"},{"location":"user/app_getting_started/#first-steps-with-the-app","title":"First steps with the App","text":"<p>Developer Note - Remove Me!</p> <p>What (with screenshots preferably) does it look like to perform the simplest workflow within the App once installed?</p>"},{"location":"user/app_getting_started/#what-are-the-next-steps","title":"What are the next steps?","text":"<p>Developer Note - Remove Me!</p> <p>After taking the first steps, what else could the users look at doing.</p>"},{"location":"user/app_overview/","title":"App Overview","text":"<p>This document provides an overview of the App including critical information and import considerations when applying it to your ADR App environment.</p> <p>Note</p> <p>Throughout this documentation, the terms \"app\" and \"project\" will be used interchangeably.</p>"},{"location":"user/app_overview/#description","title":"Description","text":"<p>Developer Note - Remove Me!</p> <p>What is the common use of this app?</p>"},{"location":"user/app_overview/#audience-user-personas-who-should-use-this-app","title":"Audience (User Personas) - Who should use this App?","text":"<p>Developer Note - Remove Me!</p> <p>Who is this meant for/ who is the common user of this app?</p>"},{"location":"user/app_overview/#authors-and-maintainers","title":"Authors and Maintainers","text":""},{"location":"user/app_overview/#django-features-used","title":"Django Features Used","text":"<p>Developer Note - Remove Me!</p> <p>What is shown today in the Installed Plugins page in the ADR App. What parts of the ADR App does it interact with, what does it add etc. ?</p>"},{"location":"user/app_overview/#extras","title":"Extras","text":"<p>Developer Note - Remove Me!</p> <p>Custom Fields - things like which CFs are created by this app? Jobs - are jobs, if so, which ones, installed by this app?</p>"},{"location":"user/app_use_cases/","title":"Using the App","text":"<p>This document describes common use-cases and scenarios for this App.</p>"},{"location":"user/app_use_cases/#general-usage","title":"General Usage","text":""},{"location":"user/app_use_cases/#use-cases-and-common-workflows","title":"Use-cases and common workflows","text":""},{"location":"user/app_use_cases/#screenshots","title":"Screenshots","text":"<p>Developer Note - Remove Me!</p> <p>Ideally captures every view exposed by the App.\u00a0Should include a relevant dataset.</p>"},{"location":"user/external_interactions/","title":"External Interactions","text":"<p>This document describes external dependencies and prerequisites for this App to operate, including system requirements, API endpoints, interconnection or integrations to other applications or services, and similar topics.</p> <p>Developer Note - Remove Me!</p> <p>Optional page, remove if not applicable.</p>"},{"location":"user/external_interactions/#external-system-integrations","title":"External System Integrations","text":""},{"location":"user/external_interactions/#from-the-app-to-other-systems","title":"From the App to Other Systems","text":""},{"location":"user/external_interactions/#from-other-systems-to-the-app","title":"From Other Systems to the App","text":""},{"location":"user/external_interactions/#rest-api-endpoints","title":"REST API endpoints","text":"<p>Developer Note - Remove Me!</p> <p>API documentation in this doc - including python request examples, curl examples, postman collections referred etc.</p>"},{"location":"user/faq/","title":"Frequently Asked Questions","text":""}]}